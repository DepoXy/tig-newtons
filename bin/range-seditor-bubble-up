#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/depoxy/tig-newtons#üçé
# License: MIT. Please find more in the LICENSE file.

# USAGE:
#
#   GIT_SEQUENCE_EDITOR='/path/to/git-rebase-bubble-up' \
#     git -c rebase.instructionFormat=%H \
#       rebase -i "<revision-before-bubble-target>"
#
# USETO:
#
#   Rebase so the first commit in the range (the ancestor commit)
#   becomes the latest commit (the new HEAD), or is placed after
#   another commit ahead of it (which is specified by a special
#   Git tag).
#
#   - This is a contactless rebase, fully automated using awk.
#
#   - The special tag feature only works when called via tig config
#     shell command (specifically tig-newton's). If called otherwise,
#     the editor will only move the bubble target to be latest commit.
#
# REFER:
#
#   The `awk -i inplace` specifies an awk extension:
#
#     https://www.gnu.org/software/gawk/manual/html_node/Extension-Sample-Inplace.html

# DEV: Uncomment to show rebase-todo before and after:
#  DX_SHOW_TODO=true
DX_SHOW_TODO=${DX_SHOW_TODO:-false}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME: The two bubble editors are similar:
#   meld range-seditor-bubble-down range-seditor-bubble-up &

# Git passes todo path, e.g., /proj/.git/rebase-merge/git-rebase-todo
range_seditor_bubble_up () {
  local rebase_todo_path="$1"

  # Git-rebase prints a line without a newline:
  #   hint: Waiting for your editor to close the file...
  # So do that now.
  echo

  # Load `range_command_print_target_match`, `print_todo_maybe`.
  local tnewtons_bin="$(dirname "$0")"
  . "${tnewtons_bin}/range-command-common.sh"

  print_todo_maybe "${rebase_todo_path}" "before"

  local rebase_cmd="$(range_command_print_command)"
  local target_match="$(range_command_print_target_match)"

  # DEV: This'd be your error.
  [ -z "${rebase_cmd}" ] && >&2 echo "ERROR: What's command?" && exit 1 || true

  # Use state to print first commit after target rev.
  # - Also discard comment lines, who needs 'em.
  awk -i inplace "
    BEGIN { state = 0 }
    state == 0 { first_commit = \$2; state = 1; next; }
    state == 2 { print \"${rebase_cmd} \" first_commit; state = 3; }
    \$0 ~ ${target_match} && state == 1 { state = 2; }
    \$0 ~ /^\$/ && state == 1 { print \"${rebase_cmd} \" first_commit; state = 3; }
    \$0 ~ /^\$/ { next; }
    \$0 ~ /^#/ { next; }
    1" ${rebase_todo_path}

  print_todo_maybe "${rebase_todo_path}" "after"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  range_seditor_bubble_up "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "$@"
fi

