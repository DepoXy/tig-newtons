# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/depoxy/tig-newtons#🍎
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME:
#
#   cd path/to/tig-newtons
#   meld tig/config-diff tig/config-main &
#
# Only difference should be 'bind main...' vs. 'bind diff', so commands
# don't apply to other views (pager, reflog, refs, stage, stash, status),
# because tig config doesn't support reusing code for multiple commands
# (alternating, we could immediately shell-out, but I'd rather not).
#
# In many case, using 'generic' is fine, if the binding doesn't shadow
# other view bindings. But there are a few symbols defined only for the
# special views, e.g., the ! binding is defined separately for multiple
# views (reflogs, refs, stage, status).

# YOU: Per DepoXy convention (htt

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SAVVY: If this returns nonzero, tig prints "Press Enter to continue".
# - Otherwise we could prompt ourselves and return 0, but let's tig it.
bind main ! >sh -c " \
  git_upraise_revision______________________ () { \
    echo; \
    local tnewtons=\"${TIGNEWTONSPATH:-${TIGNEWTONSPATH:-${HOME}/.kit/git}/tig-newtons}\"; \
    if [ ! -d \"${tnewtons}\" ]; then \
      >&2 echo \"ERROR: Please install tig-newtons to\"; \
      >&2 echo \"  ${tnewtons}\"; \
      >&2 echo \"Or use the TIGNEWTONSPATH environ.\"; \
      >&2 echo; \
      return 1; \
    fi; \
    local wipped=false; \
    git add -A \
      && git commit -q --no-verify -m 'PRIVATE: WIP [tig !]' \
      && wipped=true; \
    local bubble_cmd=\"${tnewtons}/bin/git-rebase-bubble-commit\"; \
    echo \"git rebase -i %(commit)^\"; \
    local exit_val; \
    ${bubble_cmd} \"%(commit)^\" ${wipped}; \
    exit_val=$?; \
    ${wipped} && git reset --mixed @~1; \
    echo; \
    return ${exit_val}; \
  }; git_upraise_revision______________________"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# The following commands work on a range on commits.
# - The mechanism works across two commands:
#   - The user first selects a starting commit.
#   - Then the user selects an ending commit and is prompted to
#     choose the action:
#     - Cherry-pick range, but insist commits not in HEAD history
#       (i.e., only works if user runs `tig <some-other-branch>`,
#        use case being user wants to cherry-pick commits from a
#        separate branch (DUNNO: Is there a use case for picking
#        commits from the same branch?));
#     - Move first rev. before or after second rev.; or
#     - Squash or Fixup first rev. into second rev.
#   - Note we could instead create multiple bindings, one for each
#     action, but that's at least 5 commands and we don't have many
#     available keyboard bindings remaining from which to pick.
# - Perhaps one day we'll PR tig to highlight the first commit selected,
#   but for now we'll use a temporary tag to mark the first selection.
#   - There are emoji racing flags, but not the green starting flag.
#     - So what's a good, catchy symbol to use?
#     - Note that tig doesn't show all emoji characters, or at least
#       that's my experience on Linux Mint 19.3 (which is weird,
#       because I see these same symbols fine in gVim and bash).
#     - Looking at the green emojis and flags:
#         git tag -f "🚩🍏🪴🌱🐲🐉🦕🦚💚🫑🥒🥦🔋📗💵💹🧪♎✅✳️-❇️-🈯🟢-🟩🏁🎌🏴🏳-🏳️"
#                     ^^^^  ^^^^^^^^  ^^  ^^^^^^^^^^^^  ^^^^^^^^^^     ^^^^^^^^^^^
#       The ^^-underscored emoji appear in tig,
#       and any emoji followed by a dash appears only uses a single
#       character width in tig though the emoji is 2 em, so it bleeds.
# - I originally thought user could '@' once to mark first commit, then
#   '@' again to mark second commit. But if we want to use tig's %(prompt),
#   which tig resolves before running the shell command, we should use a
#   separate final-commit binding, so the user is not %(prompt)ed on the
#   first-commit binding.
#   - Some options I consider:
#     - Use '@' for first, and <C-@> (with inherent <C-Space> alias) for final.
#     - Use '(' for first, and ')' for final.
#     - Or use '[' and ']', and save user two Shift presses.

