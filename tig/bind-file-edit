# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/DepoXy/tig-newtons#🍎
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# CPYST: Here's how you might diagnose issues with open/edit commands:
#
# - Option 1: Change the `+sh` below to `!sh` and echo, e.g.,
#
#     bind generic v !sh -c " \
#       print_file_line_info () { \
#         >&2 echo \"file=%(file)\"; \
#         >&2 echo \"file_old=%(file_old)\"; \
#         >&2 echo \"lineno=%(lineno)\"; \
#         >&2 echo \"lineno_old=%(lineno_old)\"; \
#         >&2 echo \"directory=%(directory)\"; \
#       }; print_file_line_info"
#
# - Option 2: Leave the `+sh` below and toast yourself, e.g.,
#
#     terminal-notifier -message \"%(directory) — %(file) — $( \
#       echo \"%(file)\" | sed \"s/^\\(b\\/\\)\\?/\\//\")\"; \
#
#   Or use `notify-send` on Linux Mint MATE (GNOME 2).

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# FEATR: Press `v` to open files in an external GVim editor.
#
# In diff or stage view, the file that's under the tig cursor will be
# opened, and the GVim cursor will be placed on the corresponding line.
#
# - SAVVY: This only works when you run `tig` normally.
#   - This does not work if you pipe a diff to tig, e.g.,
#     `git diff sha1..sha2 | tig`, because tig does not set %(file).
#
# - SAVVY: tig does not clear %(file) or %(lineno) if user quits
#   the diff view or otherwise moves cursor away from a file diff.
#   - In such a state, tig sets %(lineno_old) to 0.
#     - Note that file_old/lineno_old is the a/path file (the diff
#       lhs).
#   - We could test if %(lineno_old) is 0 to avoid running this
#     command in such instances, but then the `v` command won't
#     work on *added* files, i.e., where the a/ file is /dev/null.
#     - But if we add a 'main' binding in addition to the 'generic'
#       binding, the 'main' binding can prevent opening a recently
#       (but no longer) selected file from the main view.
#     - Though in 'diff' view, if user moves the cursor down to a
#       file, but then moves the cursor back up to the diff header,
#       this command will still open the most recently selected
#       file. But that's not as annoying as opening some random
#       file from the main view. So we're not gonna worry about
#       that.
#
# - Mnemonic: Think 'v', as in Vim.
#
#   - Note this hides the default tig 'v' binding, which is
#     show-version, e.g., prints 'tig-2.5.1' to the status line.
#     - You can also just run `:show-version`.
#     - But we'll move the version command to `V`.
#
# - This command prefers to call gvim-open-kindness to ensure that
#   the file does not open in the quickfix window, or the project
#   tray, or a help window, etc.
#   - You can find gvim-open-kindness here:
#       https://github.com/DepoXy/gvim-open-kindness#🐬
#   - If that project is not installed, this command calls `gvim`.
#   - In either case, you can specify the --servername by setting
#     the GVIM_OPEN_SERVERNAME environ.
#   - Regarding the URL printed from the command below:
#     - I like to postfix project URLs with a pound '#' followed by
#       an emoji.
#     - But we cannot use '#' in a tig config shell command string,
#       or tig breaks.
#     - One option is to substitute '?', which can be pasted to the
#       browser location, e.g., /gvim-open-kindness?🐬.
#       - A better option is to resolve '\\x23' to '#' using bash -c.
#
# SAVVY: We need to prepare the %(file) string before opening the
# file.
# - Depending on the Git diff prefix options, which you could set
#   via your tig config, e.g.,
#     set diff-options = --src-prefix=a/ --dst-prefix=b/
#   the %(file) component might start with "b/".
#   - Or it might not, e.g., the %(file) might be "b/path/to/file"
#     or it might just be "path/to/file".
# - Also note that, usually, the %(directory) string is the relative
#   path to the current directory, i.e., "."
# - So we use a sed command to ensure the file name starts with a "/"
#   - E.g., whether %(file) is "b/foo" or just "foo", the sed will
#     convert it to "/foo", and then the complete path will be "./foo"
# - See also git-diff's --no-prefix, and the newer (Git 2.41 and onward)
#   --default-prefix, in addition to --src-prefix and --dst-prefix.
#   - This command should handle any configuration of those options.
#     - Well, it should handle no prefix, or the "b/" prefix.

bind generic v +sh -c " \
  open_line_under_cursor__gVim______________ () { \
    if [ -n \"%(file)\" ]; then \
      if command -v gvim-open-kindness > /dev/null; then \
        gvim-open-kindness \"\" \"%(lineno)\" \"0\" \"%(directory)$( \
          echo \"%(file)\" | sed \"s/^\\(b\\/\\)\\?/\\//\")\"; \
      else \
        local servername=\"\"; \
        if [ -n \"${GVIM_OPEN_SERVERNAME}\" ] || [ -z \"${GVIM_OPEN_SERVERNAME+x}\" ]; then \
          servername=\"--servername ${GVIM_OPEN_SERVERNAME:-SAMPI}\"; \
        fi; \
        gvim ${servername} --remote-silent \
          \"%(directory)$( \
          echo \"%(file)\" | sed \"s/^\\(b\\/\\)\\?/\\//\")\"; \
        gvim ${servername} --remote-send \
          \"<ESC>:call cursor(\"%(lineno)\", \"0\")<CR>\"; \
        \
        local gvok_url=\"https://github.com/DepoXy/gvim-open-kindness\\x23🐬\"; \
        command bash -c \"echo -e 'Improve ‘v’ with gvim-open-kindness: ${gvok_url}'\"; \
      fi; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__gVim______________"

# Define a `v` command for main view that prints a helpful message,
# rather than opening the most recently (but no longer) selected
# file (from the most recent diff or stage view).
bind main v +sh -c " \
  print_helpful_hint_re_diff_v_binding______ () { \
    echo 'Try running the \"v\" command from a diff view instead'; \
  }; print_helpful_hint_re_diff_v_binding______"

# Show the tig version in the status line.
# - Note that tig binds this to `v` by default, but single-character
#   bindings, especially lowercase bindings, are precious, and we've
#   stolen `v` for our GVim opener.
# - So we'll remap the version shower to `V`.
bind generic V :show-version

# ***

# FEATR: Press `e` to open files in your EDITOR in the same process
# (and terminal) as tig.
#
# - Note this is similar to the built-in `:edit` command.
#
# - This command is necessary (or at least used to be necessary)
#   if you use diff prefixing, e.g.,
#
#     set diff-options = --src-prefix=a/ --dst-prefix=b/
#
#   which breaks the `:edit` command.
#
# - You can test against vanilla tig thusly (though still loads
#   your Git config) if you're fiddling with the prefix options:
#
#     XDG_CONFIG_HOME=foo tig
#
#   You should see that 'e' works, and that the tig 'diff' view
#   shows `--- file` and `+++ file` without an a/ and b/ prefix.
#
#   - In old tig versions, or maybe it was old iterations of
#     tig-newtons config, the tig `blame` mode would fail if
#     the paths *did not* have the a/ and b/ prefix. But lately
#     the tig blame view seems to work without those prefixes.
#     - I sort of assume this was a tig-newton problem, and not
#       a tig problem. Fortunately I can no longer replicate it.
#
# - Note that `:edit` prints "Nothing to edit" to the status line
#   when run from the main view. But we'll print a hintful message
#   instead, telling the user to run this command from diff view.
#
# - REFER: tig resolves the EDITOR in tig/src/display.c open_editor():
#   - tig prefers TIG_EDITOR → GIT_EDITOR → VISUAL → EDITOR → vi.

bind generic e >sh -c " \
  open_line_under_cursor__editor____________ () { \
    if [ -n \"%(file)\" ]; then \
      echo; \
      local editor=\"${TIG_EDITOR:-${GIT_EDITOR:-${VISUAL:-${EDITOR:-vi}}}}\"; \
      ${editor} +%(lineno) \"%(directory)$( \
        echo \"%(file)\" | sed \"s/^\\(b\\/\\)\\?/\\//\")\"; \
      echo; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__editor____________"

# Without this binding, running 'e' from the main view would either
# print "Nothing to edit", or it would open the most recently (but
# no longer) selected file (from the last diff or stage view).
bind main e +sh -c " \
  print_helpful_hint_re_diff_e_binding______ () { \
    echo 'Try running the \"e\" command from a diff view instead'; \
  }; print_helpful_hint_re_diff_e_binding______"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

