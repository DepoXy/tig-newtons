# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/DepoXy/tig-newtons#🍎
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# CPYST: Here's how you might diagnose issues with open/edit commands:
#
# - Option 1: Change the `+sh` below to `!sh` and echo, e.g.,
#
#     bind generic v !sh -c " \
#       print_file_line_info () { \
#         >&2 echo \"file=%(file)\"; \
#         >&2 echo \"file_old=%(file_old)\"; \
#         >&2 echo \"lineno=%(lineno)\"; \
#         >&2 echo \"lineno_old=%(lineno_old)\"; \
#         >&2 echo \"directory=%(directory)\"; \
#       }; print_file_line_info"
#
# - Option 2: Leave the `+sh` below and toast yourself, e.g.,
#
#     terminal-notifier -message \"%(directory) — %(file) — $( \
#       echo \"%(file)\" | sed \"s/^\\(b\\/\\)\\?/\\//\")\"; \
#
#   Or use `notify-send` on Linux Mint MATE (GNOME 2).

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Press `v` to open files in GVim.
#
# In diff view, the file that's under the cursor will be opened,
# and the cursor will be placed on the corresponding line.
#
# - Note: This works in a tig diff view.
#         But it does not work in a
#           `git diff a..b | tig` view.
#
# - I did not add a similar command to open the file in Vim
#   in the same terminal as tig, but you could do so with a
#   `!sh` so tig shows output, e.g.,
#
#       bind generic V !sh -c " \
#         vim -c \"call cursor(%(lineno), 0)\" \"%(directory)$(echo '%(file)' | sed 's/^b//')\""
#
# - CAVEAT: tig does not clear %(file) or %(lineno) if user quits 'diff'
#   view or otherwise moves cursor away from file diff.
#   - Fortunately, tig set %(lineno_old) to 0 when in such a state.
#     Use that to know if there's a file to open or not.
#   - Note also: file_old/lineno_old is the a/path file (the diff lhs).
#     (If you thought file_old/lineno_old was user's previous selection
#      in tig, then you're not alone; or maybe I'm the odd one.)
#     - I wonder if I should open a ticket and MR to also reset %(lineno) to
#       0 when %(lineno_old) is reset to 0, or if there's a reason it's not.
#
# - Mnemonic: Think 'v', as in Vim.
#
#   - Note this hides the default tig 'v', which
#     is show-version, e.g., 'tig-2.5.1'
#     - To access: :show-version.
#     - We'll also replace at 'V', why not.
#
# - This calls gvim-open-kindness (from Home Fries) to ensure that
#   file does not open in quickfix window, or the project tray, or
#   a help window, etc.
#     https://github.com/landonb/home-fries/blob/release/bin/gvim-open-kindness
#
# - I like to postfix project URLs with a pound '#' followed by an emoji.
#   But cannot use '#' in a tig config shell command string, or tig breaks.
#   One could substitute '?', which can be pasted to browser location, e.g.,
#   /gvim-open-kindness?🐬. Another option is resolving \\x23 using bash -c.
bind generic v +sh -c " \
  open_line_under_cursor__gVim______________ () { \
    if [ -n \"%(file)\" ]; then \
      if command -v gvim-open-kindness > /dev/null; then \
        gvim-open-kindness \"\" \"%(lineno)\" \"0\" \"%(directory)$(echo '%(file)' | sed 's/^b//')\"; \
      else \
        local servername=\"\"; \
        if [ -n \"${GVIM_OPEN_SERVERNAME}\" ] || [ -z \"${GVIM_OPEN_SERVERNAME+x}\" ]; then \
          servername=\"--servername ${GVIM_OPEN_SERVERNAME:-SAMPI}\"; \
        fi; \
        gvim ${servername} --remote-silent \
          \"%(directory)$(echo \"%(file)\" | sed \"s/^b//\")\"; \
        gvim ${servername} --remote-send \
          \"<ESC>:call cursor(\"%(lineno)\", \"0\")<CR>\"; \
        \
        local gvok_url=\"https://github.com/DepoXy/gvim-open-kindness\\x23🐬\"; \
        command bash -c \"echo -e 'Improve ‘v’ with gvim-open-kindness: ${gvok_url}'\"; \
      fi; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__gVim______________"

# Define a `v` command for main view that prints a helpful message,
# rather than opening the most recently (but no longer) selected
# file (from the most recent diff or stage view).
bind main v +sh -c " \
  print_helpful_hint_re_diff_v_binding______ () { \
    echo 'Try running the \"v\" command from a diff view instead'; \
  }; print_helpful_hint_re_diff_v_binding______"

# Show the tig version in the status line.
# - Note that tig binds this to `v` by default, but single-character
#   bindings, especially lowercase bindings, are precious, and we've
#   stolen `v` for our GVim opener.
# - So we'll remap the version shower to `V`.
bind generic V :show-version

# ***

# The diff-options option above breaks tig's built-in 'e' and :edit
# commands. Specifically, this setting above:
#
#   set diff-options = --src-prefix=a/ --dst-prefix=b/
#
# You can test against vanilla tig thusly (though still loads your Git config):
#
#   XDG_CONFIG_HOME=foo tig
#
# and you should see that 'e' works, and that the tig 'diff' view
# shows the `--- file` and `+++ file` without an a/ and b/ prefix
# (as opposed to how we format it, `--- a/file` and `+++ b/file`,
#  which makes it so tig-blame works (because tig-blame fails if
#  the paths *do not* have the a/ and b/ prefix, I know, right)).
#
# I have not searched GitHub Issues, but I would be surprised if
# this is an issue for the broader public, because it seems like
# something that would've been fixed (which is why I have not
# bothered to search GitHub Issues). So I assume it's something
# with my tig or Git configs, or development environment -- though
# not to say tig shouldn't be fixed, because this is ultimately a
# tig issue.
#
# Here we replace broken 'e' with a mostly faithful reproduction.
# Because we use '!' (full i/o, b/c Vim is interactive), even
# when there's nothing to edit, tig shells out and the user must
# 'Press Enter to continue'. This is different from the built-in 'e'
# command, where tig prints "Nothing to edit" to the status line, and
# tig never shells out and the user is not prompted.
# - BROKE: Note that the :edit command remains broken. Whatever, just
#   use 'e'. Or better yet, use 'v'.
# - SYNCD: See EDITOR resolution in tig/src/display.c open_editor():
#            Prefers TIG_EDITOR → GIT_EDITOR → VISUAL → EDITOR → vi.
bind generic e >sh -c " \
  open_line_under_cursor__editor____________ () { \
    if [ -n \"%(file)\" ]; then \
      echo; \
      local editor=\"${TIG_EDITOR:-${GIT_EDITOR:-${VISUAL:-${EDITOR:-vi}}}}\"; \
      ${editor} +%(lineno) \"%(directory)$(echo \"%(file)\" | sed \"s/^b//\")\"; \
      echo; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__editor____________"

# Without this binding, running 'e' from the main view would either
# print "Nothing to edit", or it would open the most recently (but
# no longer) selected file (from the last diff or stage view).
bind main e +sh -c " \
  print_helpful_hint_re_diff_e_binding______ () { \
    echo 'Try running the \"e\" command from a diff view instead'; \
  }; print_helpful_hint_re_diff_e_binding______"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

