# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/depoxy/tig-newtons#üçé
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# CXREF/2023-01-15: Tig default configuration:
#   https://jonas.github.io/tig/doc/tigrc.5.html
#   https://github.com/jonas/tig/blob/master/tigrc
#   - If you're using DepoXy, locally at:
#       ~/.kit/git/tig/tigrc
#     https://github.com/depoxy/depoxy#üçØ
#   - See also:
#       man tig
#       man tigrc
#       man tigmanual

# HINT/2020-12-14: Test/Run `tig` without loading this config:
#
#   XDG_CONFIG_HOME=not-a-path tig

# BWARE/2021-01-28: If a comment ends with a trailing slash \
# then next line or command will be ignored, commented or not.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** MOUSE

# set mouse = yes
# set mouse-scroll = 1
# set mouse-wheel-cursor = yes

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** BIND(INGS)

# CXREF: See also `man tigmanual`, in addition to `man tig` and `man tigrc`.

# TRYME: Test binding:
#
#   bind generic <C-x> +sh -c "echo You got me!"

# ***


# ***

# 2021-01-27: From `man tigrc` examples, might be useful if working on this file:
#
#   # "User-defined internal command that reloads ~/.tigrc"
#   bind generic S :source ~/.tigrc
#
# NOTE/2021-01-27: 'S' is already mapped, though it's not mentioned in the docs.
# - Run tig and press 'h' to see it's bound, but same as 's': `s, S view-status`.
#   So you could remap 'S' and not lose any functionality.

# ***

# Press `v` to open files in GVim.
#
# In diff view, the file that's under the cursor will be opened,
# and the cursor will be placed on the corresponding line.
#
# - Note: This works in a tig diff view.
#         But it does not work in a
#           `git diff a..b | tig` view.
#
# - I did not add a similar command to open the file in Vim
#   in the same terminal as tig, but you could do so with a
#   `!sh` so tig shows output, e.g.,
#
#       bind generic V !sh -c " \
#         vim -c \"call cursor(%(lineno), 0)\" \"%(directory)$(echo '%(file)' | sed 's/^b//')\""
#
# - CAVEAT: tig does not clear %(file) or %(lineno) if user quits 'diff'
#   view or otherwise moves cursor away from file diff.
#   - Fortunately, tig set %(lineno_old) to 0 when in such a state.
#     Use that to know if there's a file to open or not.
#   - Note also: file_old/lineno_old is the a/path file (the diff lhs).
#     (If you thought file_old/lineno_old was user's previous selection
#      in tig, then you're not alone; or maybe I'm the odd one.)
#     - I wonder if I should open a ticket and MR to also reset %(lineno) to
#       0 when %(lineno_old) is reset to 0, or if there's a reason it's not.
#
# - Mnemonic: Think 'v', as in Vim.
#
#   - Note this hides the default tig 'v', which
#     is show-version, e.g., 'tig-2.5.1'
#     - To access: :show-version.
#     - We'll also replace at 'V', why not.
#
# - This calls gvim-open-kindness (from Home Fries) to ensure that
#   file does not open in quickfix window, or the project tray, or
#   a help window, etc.
#     https://github.com/landonb/home-fries/blob/release/bin/gvim-open-kindness
#
# - I like to postfix project URLs with a pound '#' followed by an emoji.
#   But cannot use '#' in a tig config shell command string, or tig breaks.
#   One could substitute '?', which can be pasted to browser location, e.g.,
#   /gvim-open-kindness?üê¨. Another option is resolving \\x23 using bash -c.
bind generic v +sh -c " \
  open_line_under_cursor__gVim______________ () { \
    if [ -n \"%(file)\" ] && [ %(lineno_old) -ne 0 ]; then \
      if command -v gvim-open-kindness > /dev/null; then \
        gvim-open-kindness \"\" \"%(lineno)\" \"0\" \"%(directory)$(echo '%(file)' | sed 's/^b//')\"; \
      else \
        local gvok_url=\"https://github.com/DepoXy/gvim-open-kindness\\x23üê¨\"; \
        gvim --remote-silent \"%(directory)$(echo \"%(file)\" | sed \"s/^b//\")\"; \
        gvim --remote-send \"<ESC>:call cursor(\"%(lineno)\", \"0\")<CR>\"; \
        /bin/bash -c \"echo -e 'Improve ‚Äòv‚Äô with gvim-open-kindness: ${gvok_url}'\"; \
      fi; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__gVim______________"

bind generic V :show-version

# ***

# Here's how you might diagnose issues with open/edit commands:
#
#   bind generic V !sh -c " \
#     print_file_line_info () { \
#       >&2 echo \"file=%(file)\"; \
#       >&2 echo \"file_old=%(file_old)\"; \
#       >&2 echo \"lineno=%(lineno)\"; \
#       >&2 echo \"lineno_old=%(lineno_old)\"; \
#       >&2 echo \"directory=%(directory)\"; \
#     }; print_file_line_info"

# ***

# The diff-options option above breaks tig's built-in 'e' and :edit
# commands. Specifically, this setting above:
#
#   set diff-options = --src-prefix=a/ --dst-prefix=b/
#
# You can test against vanilla tig thusly (though still loads your Git config):
#
#   XDG_CONFIG_HOME=foo tig
#
# and you should see that 'e' works, and that the tig 'diff' view
# shows the `--- file` and `+++ file` without an a/ and b/ prefix
# (as opposed to how we format it, `--- a/file` and `+++ b/file`,
#  which makes it so tig-blame works (because tig-blame fails if
#  the paths *do not* have the a/ and b/ prefix, I know, right)).
#
# I have not searched GitHub Issues, but I would be surprised if
# this is an issue for the broader public, because it seems like
# something that would've been fixed (which is why I have not
# bothered to search GitHub Issues). So I assume it's something
# with my tig or Git configs, or development environment -- though
# not to say tig shouldn't be fixed, because this is ultimately a
# tig issue.
#
# Here we replace broken 'e' with a mostly faithful reproduction.
# Because we use '!' (full i/o, b/c Vim is interactive), even
# when there's nothing to edit, tig shells out and the user must
# 'Press Enter to continue'. This is different from the built-in 'e'
# command, where tig prints "Nothing to edit" to the status line, and
# tig never shells out and the user is not prompted.
# - BROKE: Note that the :edit command remains broken. Whatever, just
#   use 'e'. Or better yet, use 'v'.
# - SYNCD: See EDITOR resolution in tig/src/display.c open_editor():
#            Prefers TIG_EDITOR ‚Üí GIT_EDITOR ‚Üí VISUAL ‚Üí EDITOR ‚Üí vi.
bind generic e >sh -c " \
  open_line_under_cursor__editor____________ () { \
    if [ -n \"%(file)\" ] && [ %(lineno_old) -ne 0 ]; then \
      echo; \
      local editor=\"${TIG_EDITOR:-${GIT_EDITOR:-${VISUAL:-${EDITOR:-vi}}}}\"; \
      ${editor} +%(lineno) \"%(directory)$(echo \"%(file)\" | sed \"s/^b//\")\"; \
      echo; \
    else \
      echo \"Nothing to edit\"; \
    fi; \
  }; open_line_under_cursor__editor____________"

# ***

# 2020-12-14 15:04: Press 'x' to copy the commid ID/SHA1 hash.
#
# - From `man tigrc`:
#
#     Example 1. Configure a binding to copy the current commit ID to the clipboard.
#     bind generic I @sh -c "echo -n %(commit) | xclip -selection c"
#
#   - I'm guessing the 'I' chosen in the example stands for commit [I]D.
#
#   - I also like 'x', which is unbound, because 'X' is the commit ID toggle.
#
#   - Both c's are taken: 'c' is switch to stage view, and 'C' is cherry-pick
#     in main, and commit in status. Which is fine, I like 'x'.
#
# - How this works: Try xclip first (Linux), then fallback pbcopy (macOS).
#
# - Note that `xclip -selection c` is `xclip -selection clipboard` (XA_CLIPBOARD),
#   i.e., not the "primary" (XA_PRIMARY) X selection (which is the default).
#
# - Note also that tig ignores (doesn't show the user) any command output.
#
#   E.g., I had only `2> /dev/null` here first (i.e., not redirecting stdout)
#   but tig was nonetheless not showing any stdout when `type xclip` printed
#   "xclip is /usr/bin/xclip". Just an FYI, for whatever reason.
#
bind generic x @sh -c " \
  clipboard_copy__selected_commit_sha_______ () { \
    type xclip > /dev/null 2>&1 && \
      ( printf %(commit) | xclip -selection c ) \
      || ( printf %(commit) | pbcopy ); \
  }; clipboard_copy__selected_commit_sha_______"

# 2020-12-14 15:05: Show commit ID by default.
set main-view-id = yes

# ***

# Copy filepath to clipboard
# - Mnemonic: Copy 'P'ath
# - Note: This strips leading "b/" that tig prints, e.g., "a/path" and "b/path"
# - Note: This strips realpath newline using tr, but here's alt: | sed -z 's/\\n$//g'
bind generic P @sh -c " \
  clipboard_copy__file_path_________________ () { \
    local path=\"$(realpath -- \"%(directory)$(printf '%(file)' | sed 's/^b//')\" | tr -d '\\n')\"; \
    type xclip > /dev/null 2>&1 \
      && printf $path | xclip -selection c \
      || printf $path | pbcopy; \
  }; clipboard_copy__file_path_________________"

# ***

# Git-pwip binding.
# - <C-w> available, but I feel it's overloaded (kill word, close window, etc.).
#   <C-i> available, meh.
#   <C-t> could work, as in *Tidy*.
# - Note that I tried sync style, which lets us 'echo' message to status line:
#     bind generic <C-t> +sh -c "
#   Unfortunately the main display is not updated, and I don't know how to tell
#   tig to update the revision list. Fortunately, we can just use the '@sh'
#   binding, which blocks tig to run, and tig doesn't show its output, but
#   user at least sees revision list update to show new WIP commit. (See
#   also '!sh' option, but that hides tig window to show output in terminal
#   and prompts user to acknowledge.)
# - Note @sh better than >sh, so tig doesn't shell out for a blip.
bind generic <C-t> @sh -c " \
  wip_commit__push__aka_tidy_up_____________ () { \
    git_status_porcelain () { git status --porcelain=v1; }; \
    if [ -n \"$(git_status_porcelain)\" ]; then \
      git add -A \
        && git commit -q --no-verify -m 'PRIVATE: WIP'; \
    else \
      echo 'Already pristine'; \
    fi; \
  }; wip_commit__push__aka_tidy_up_____________"

# ***

# Git-pop binding.

# A very conversative git-pop binding:
# - Only pops the youngest commit.
# - Only pops a WIP commit.

# Note that running '+sh' synchronously, you can show status line upate,
# but after WIP removed, the tig view is not updated.
# - Fortunately running '@sh' in background, view updates immediately,
#   and no other user interaction happens, which is nice, because user
#   can see that the WIP commit was replaced with "Unstaged changes",
#   which is exactly my use case: pop the WIP commit, then stage and
#   commit it for reals [I seriously cannot think of a better term
#   than "for reals", seriously, what's the synonym I'm looking for?
#   "professionally"? "legitimately"? "deliberately"? for reals!].
# - Hrm, tig's built-in '^' command calls `:toggle rev-filter`, but a few
#   issues: "rev-filter" is not mentioned in the docs. `man tigmanual`
#   mentions "revision filtering" once:
#       ^   Toggle revision filtering in the main view.
#   But -- most importantly -- when I demo the toggle (it defaults so
#   revision filtering is on), I don't see a lick of change in the main
#   view. So, like, whatever, I'll mask this option if I want to, nothing
#   apparently lost.
#   - I originally used the unbound '_' binding:
#       bind generic _ @sh -c ...
#    but I'm gonna steal '^' because I like the mnemonic better --
#    pointing up, as in "popping off". (And I'm not going to remap
#    `:toggle rev-filter` because I don't use that setting/does nothing
#    for me.) (Also note this command changes revisions, and I like to
#    use a two-key press for changy commands, which this command
#    satisfies because it uses two keys: Shift and '6'.) (Also nice
#    about '^': it's above Ctrl-t (US American keyboard at least)
#    which is the wip-create command. So you can Ctrl-t/^/Ctrl-t/^/...
#    all day long.)
# - Note @sh better than >sh, so tig doesn't shell out for a blip.
bind generic ^ @sh -c " \
  wip_commit__pop___iff_youngest_rev________ () { \
    git_grep_youngest_rev () { \
      git --no-pager log --pretty=format:\"%H\" --grep \"$1\" HEAD^..HEAD; \
    }; \
    if [ -n \"$(git_grep_youngest_rev \"\\bWIP\\b\")\" ]; then \
      git reset --mixed @~1 > /dev/null; \
    else \
      echo 'Nothing WIPped'; \
    fi; \
  }; wip_commit__pop___iff_youngest_rev________"

# ***

# No-op shell-out to view output from previous command.
# - Hm, Escape works, but brief pause before you see shell:
#     bind generic <Esc> !sh -c "
# - Hm, responds "Only one view is displayed":
#     bind generic <C-i> !sh -c "
# - "Unknown key":
#     bind generic <C-.> !sh -c "
# Phew! Just period alone works, wasn't previously bound,
# and it's near Enter, which you hit to return to tig.
bind generic . !sh -c " \
  shell_out_to_view_previous_command_output_ () { \
    :; \
  }; shell_out_to_view_previous_command_output_"

# ***

# FIXME/2023-02-14 10:29: Use +sh and %(prompt)

# I like <C-x> except implies copied to clipboard and <C-z> undoable.
bind generic <C-o> >sh -c " \
  git_drop_revision_________________________ () { \
    echo; \
    printf \"Really drop %(commit)? [Y/n] \"; \
    read input; \
    if [ -z \"${input}\" ] || [ \"${input}\" = \"Y\" ] || [ \"${input}\" = \"y\" ]; then \
      echo \"git rebase --onto %(commit)^ %(commit)\"; \
      git rebase --onto %(commit)^ %(commit); \
    else \
      echo \"Ope\"; \
    fi; \
    echo; \
  }; git_drop_revision_________________________"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

