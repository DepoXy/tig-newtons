# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/depoxy/tig-newtons#üçé
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# CXREF/2023-01-15: Tig default configuration:
#   https://jonas.github.io/tig/doc/tigrc.5.html
#   https://github.com/jonas/tig/blob/master/tigrc
#   - If you're using DepoXy, locally at:
#       ~/.kit/git/tig/tigrc
#     https://github.com/depoxy/depoxy#üçØ
#   - See also:
#       man tig
#       man tigrc
#       man tigmanual

# HINT/2020-12-14: Test/Run `tig` without loading this config:
#
#   XDG_CONFIG_HOME=not-a-path tig

# BWARE/2021-01-28: If a comment ends with a trailing slash \
# then next line or command will be ignored, commented or not.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** MOUSE

# set mouse = yes
# set mouse-scroll = 1
# set mouse-wheel-cursor = yes

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** BIND(INGS)

# CXREF: See also `man tigmanual`, in addition to `man tig` and `man tigrc`.

# ***

# TRYME: Test binding:
#
#   bind generic <C-x> +sh -c "echo You got me!"

# ***

# DEV: From `man tigrc`, this might be useful when working on tig config:
#
#   # "User-defined internal command that reloads ~/.tigrc"
#   bind generic S :source ~/.tigrc
#
# NOTE/2021-01-27: 'S' is already mapped, though it's not mentioned in the docs.
# - Run tig and press 'h' to see it's bound, but same as 's': `s, S view-status`.
#   So you could remap 'S' and not lose any functionality.

# ***

# 2020-12-14 15:04: Press 'x' to copy the commid ID/SHA1 hash.
#
# - From `man tigrc`:
#
#     Example 1. Configure a binding to copy the current commit ID to the clipboard.
#     bind generic I @sh -c "echo -n %(commit) | xclip -selection c"
#
#   - I'm guessing the 'I' chosen in the example stands for commit [I]D.
#
#   - I also like 'x', which is unbound, because 'X' is the commit ID toggle.
#
#   - Both c's are taken: 'c' is switch to stage view, and 'C' is cherry-pick
#     in main, and commit in status. Which is fine, I like 'x'.
#
# - How this works: Try xclip first (Linux), then fallback pbcopy (macOS).
#
# - Note that `xclip -selection c` is `xclip -selection clipboard` (XA_CLIPBOARD),
#   i.e., not the "primary" (XA_PRIMARY) X selection (which is the default).
#
# - Note also that tig ignores (doesn't show the user) any command output.
#
#   E.g., I had only `2> /dev/null` here first (i.e., not redirecting stdout)
#   but tig was nonetheless not showing any stdout when `type xclip` printed
#   "xclip is /usr/bin/xclip". Just an FYI, for whatever reason.
#
bind generic x @sh -c " \
  clipboard_copy__selected_commit_sha_______ () { \
    type xclip > /dev/null 2>&1 \
      && printf %(commit) | xclip -selection c \
      || printf %(commit) | pbcopy; \
  }; clipboard_copy__selected_commit_sha_______"

# 2020-12-14 15:05: Show commit ID by default.
set main-view-id = yes

# ***

# Copy filepath to clipboard
# - Mnemonic: Copy 'P'ath
# - Note: This strips leading "b/" that tig prints, e.g., "a/path" and "b/path"
# - Note: This strips realpath newline using tr, but here's alt: | sed -z 's/\\n$//g'
bind generic P @sh -c " \
  clipboard_copy__file_path_________________ () { \
    local path=\"$(realpath -- \"%(directory)$(printf '%(file)' | sed 's/^b//')\" | tr -d '\\n')\"; \
    type xclip > /dev/null 2>&1 \
      && printf $path | xclip -selection c \
      || printf $path | pbcopy; \
  }; clipboard_copy__file_path_________________"

# ***

# No-op shell-out to view output from previous command.
# - Hm, Escape works, but brief pause before you see shell:
#     bind generic <Esc> !sh -c "
# - Hm, responds "Only one view is displayed":
#     bind generic <C-i> !sh -c "
# - "Unknown key":
#     bind generic <C-.> !sh -c "
# Phew! Just period alone works, wasn't previously bound,
# and it's near Enter, which you hit to return to tig.
bind generic . !sh -c " \
  shell_out_to_view_previous_command_output_ () { \
    :; \
  }; shell_out_to_view_previous_command_output_"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

