# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/DepoXy/tig-newtons#🍎
# License: MIT. Please find more in the LICENSE file.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Command boilerplate notes:
# - Note the `exec` appended to the .git/git-rebase-todo, which
#   pops the stashed WIP commit after the user finishes rebase.
#   - It also runs optional post-rebase user hook (GIT_POST_REBASE_EXEC).
#   - We `&` background the operation so that git-rebase does
#     not see uncommitted changes, otherwise it'll think the
#     rebase failed:
#
#       $ git rc
#       Executing: git reset --mixed @~1
#       Unstaged changes after reset:
#       M	some/file
#       M	another/f
#       error: cannot rebase: You have unstaged changes.
#       warning: execution succeeded: git reset --mixed @~1
#       but left changes to the index and/or the working tree
#       Commit or stash your changes, and then run
#
#         git rebase --continue
#
#   - Note also the short sleep, though it works without in practice,
#     but there's a race condition with the Git tidy work tree check:
#
#       https://github.com/git/git/blob/5bc069e383539824fd3a0d897100d44bbe1f8a24/sequencer.c#L3620
#
#   - Furthermore, the `$(echo '16i 23 P' | dc)` prints "#", because we
#     cannot use comment character at all anywhere in the `sh -c` command.
#     ('16i' specifies the radix (hex) and 'P' tells dc to print.)
#     - And not using simpler `$(printf "\x23")` which is supported
#       by Bash, by not by default POSIX shell (like dash). (Though
#       we could call `$(command bash -c "printf '\x23'")` instead.)
#     - The full text, " #git-smart", is appended to the 'exec' command,
#       which tells git-abort to run the 'exec' if the user aborts the
#       rebase.
#       - CXREF: https://github.com/landonb/git-smart#💡
#           ~/.kit/git/git-smart/bin/git-abort
#
# - The `git commit -q` is insufficient and we must use `> /dev/null`,
#   because Git prints to stderr if there's nothing to commit, e.g.,:
#
#     $ test -z "$(git status --porcelain=v1)" && git ci -m "Nothing!"
#     On branch release
#     nothing to commit, working tree clean

# ***

# Git-rebase binding.
# - Note the selected commit is not included in the rebase, i.e.,
#   calls `git rebase -i %(commit)`, not `git rebase -i %(commit)^`
# - We throw in `--autosquash` so if user ran, e.g.,
#   `git commit --fixup <sha>`, or `git commit --squash <sha>`,
#   then that commit will be fixed up or squashed.
bind generic <C-r> >sh -c " \
  rebase_interactive___from_selected_rev____ () { \
    ! git diff --cached --quiet \
      && printf '%s\\n\\n' 'ERROR: <Ctrl-r> disabled while staging' \
      && return 1 || true; \
    local wipped=false; \
    git add -A \
      && git commit -q --no-verify -m \"${PRIVATE_PREFIX:-PRIVATE: }WIP [tig <C-r>]\" > /dev/null \
      && wipped=true; \
    \
    local retcode=0; \
    git rebase -i --autosquash %(commit); \
    retcode=$?; \
    \
    GIT_REBASE_TODO_PATH=\".git/rebase-merge/git-rebase-todo\"; \
    if [ ${retcode} -ne 0 ] || [ -f \"${GIT_REBASE_TODO_PATH}\" ]; then \
      GITSMART_POST_REBASE_EXECS_TAG=\" $(echo '16i 23 P' | dc)git-abort\"; \
      \
      if [ -n \"${GIT_POST_REBASE_EXEC}\" ]; then \
        echo \"exec ${GIT_POST_REBASE_EXEC} ${GITSMART_POST_REBASE_EXECS_TAG}\" \
            >> \"${GIT_REBASE_TODO_PATH}\"; \
      fi; \
      \
      if ${wipped}; then \
        echo \"exec sleep 0.1 && git reset -q --mixed @~1) &\" \
          \"${GITSMART_POST_REBASE_EXECS_TAG}\" \
            >> \"${GIT_REBASE_TODO_PATH}\"; \
      fi; \
      \
      local also_why=''; \
      [ ${retcode} -ne 0 ] || also_why=\"\\n (says ${GIT_REBASE_TODO_PATH})\"; \
      \
      >&2 echo; \
      >&2 echo \"Killing \\`tig\\` because you got work to do${also_why}\"; \
      >&2 echo \"  🥩 🥩 chop chop\"; \
      \
      kill -s 9 $PPID; \
    else \
      [ -n \"${GIT_POST_REBASE_EXEC}\" ] \
        && eval ${GIT_POST_REBASE_EXEC}; \
      \
      ${wipped} && git reset -q --mixed @~1; \
      \
      echo; \
    fi; \
  }; rebase_interactive___from_selected_rev____"

# ***

# COPYD: See git-reword/git_reword_revision in git-smart
#   https://github.com/landonb/git-smart#💡
# If using DepoXy, it's at ~/.kit/git/git-smart/bin/git-reword
#
# YOU: If you use Vim and find your EDITOR slow to open,
#      consider running it without plugs to help diagnose:
#        ...
#        EDITOR='vim --noplugin' \
#        GIT_SEQUENCE_EDITOR='f () { ...
bind generic & >sh -c " \
  rebase_reword________selected_rev_________ () { \
    ! git diff --cached --quiet \
      && printf '%s\\n\\n' 'ERROR: <&> disabled while staging' \
      && return 1 || true; \
    \
    local wipped=false; \
    git add -A \
      && git commit -q --no-verify -m \"${PRIVATE_PREFIX:-PRIVATE: }WIP [tig <&>]\" > /dev/null \
      && wipped=true; \
    \
    GIT_SEQUENCE_EDITOR='f () { \
      local rebase_todo_path=\"$1\"; \
      \
      sed -i \"1 s/^pick/reword/\" \"${rebase_todo_path}\"; \
    }; f \"$1\"' git rebase -i \"%(commit)^\"; \
    \
    local __comment__='♯ Not checking error; assuming git-reword always a success'; \
    \
    [ -n \"${GIT_POST_REBASE_EXEC}\" ] \
      && eval ${GIT_POST_REBASE_EXEC}; \
    \
    ${wipped} && git reset -q --mixed @~1; \
    \
    echo; \
  }; rebase_reword________selected_rev_________"

# ***

# COPYD: See git-edit/git_edit_revision in git-smart
#   https://github.com/landonb/git-smart#💡
# If using DepoXy, it's at ~/.kit/git/git-smart/bin/git-edit
#   meld ~/.kit/git/git-smart/bin/git-edit ~/.kit/git/tig-newtons/tig/bind-rebase &
# - See comments above for GITSMART_POST_REBASE_EXECS_TAG
#   and GIT_SEQUENCE_EDITOR explanations.
#
# SAVVY: <sh exits Tig after executing the command.
bind generic * <sh -c " \
  rebase_edit__________selected_rev_________ () { \
    ! git diff --cached --quiet \
      && printf '%s\\n\\n' 'ERROR: <*> disabled while staging' \
      && return 1 || true; \
    \
    local wipped=false; \
    git add -A \
      && git commit -q --no-verify -m \"${PRIVATE_PREFIX:-PRIVATE: }WIP [tig <*>]\" > /dev/null \
      && wipped=true; \
    \
    GITSMART_POST_REBASE_EXECS_TAG=\" $(echo '16i 23 P' | dc)git-abort\"; \
    \
    GIT_SEQUENCE_EDITOR=\"f () { \
      local rebase_todo_path=\\\"\\$1\\\"; \
      \
      sed -i '1 s/^pick/edit/' \\\"\\${rebase_todo_path}\\\"; \
      \
      if [ -n \\\"${GIT_POST_REBASE_EXEC}\\\" ]; then \
        echo 'exec ${GIT_POST_REBASE_EXEC} > /dev/null 2>&1' \
          '${GITSMART_POST_REBASE_EXECS_TAG}' \
            >> \\\"\\${rebase_todo_path}\\\"; \
      fi; \
      \
      if ${wipped}; then \
        echo 'exec sleep 0.1 && git reset -q --mixed @~1) &' \
          '${GITSMART_POST_REBASE_EXECS_TAG}' \
            >> \\\"\\${rebase_todo_path}\\\"; \
      fi; \
    }; f \\\"\\$1\\\"\" git rebase -i %(commit)^; \
    \
    echo; \
  }; rebase_edit__________selected_rev_________"

# ***

# Fixup commit. Usage: Stage your changes, then select commit and press '+'.
# - Note we use 'generic', but we could use 'main' and 'diff' to be more
#   precise, except then we'd need two separate bind commands, AFAIK.
# - Also, I wanted to use Ctrl-Up, but after investigating, I don't
#   think tig does Ctrl-Arrow bindings. Then I thought maybe <C-f>
#   could be a decent choice. But now thinking '+', which has the
#   mnemonic that you're 'adding' to commit, would could be helpful.
# - Consider the tig options for shelling out:
#     '!' (runs in fg; full i/o)
#     '@' (runs in bg; no i/o)
#     '+' (runs sync; shows 1st line of output)
#     '?' (Prompt the user before executing the command)
#     '<' (Exit Tig after executing the command)
#     '>' (Re-open Tig instantly ... after executing the command -- aka quick)
# - With '!', user can interact with command; also, user can see the
#   git-rebase output, which can be nice for review and confirmation (as
#   opposed to just silently fup'ping, and user just assuming it ran).
#   - Except user will see changes in the revision history in tig,
#     and being prompted to return to tig gets annoying after a while,
#     so author prefers '>' vs. '!'.
#   - Note, too, `bind generic + +sh` is nice because we could print
#     a one-line message to the status window, with no shell-out
#     disruption. But it's not nice because it doesn't update the
#     view.
# - Huh: Git doesn't always remove .git/REBASE_HEAD after rebase.
#   - It does remove git-rebase-todo.
# - See comments above `&` command for `exec` mechanism explanation.
bind generic + >sh -c " \
  rebase_fixup_staged__into_selected_rev____ () { \
    local tnewtons=\"${TIGNEWTONSPATH:-${HOME}/.kit/git/tig-newtons}\"; \
    if [ ! -d \"${tnewtons}\" ]; then \
      local readme_url=\"https://github.com/DepoXy/tig-newtons\\x23setup\"; \
      command bash -c \
        \"echo -e 'ERROR: Setup tig-newtons properly' \
          'to use this feature — ${readme_url}'\"; \
      return 1; \
    fi; \
    \
    local git_fup=\"${tnewtons}/deps/git-smart/bin/git-fup\"; \
    local retcode=0; \
    \"${git_fup}\" %(commit); \
    retcode=$?; \
    \
    GIT_REBASE_TODO_PATH=\".git/rebase-merge/git-rebase-todo\"; \
    if [ ${retcode} -ne 0 ] || [ -f \"${GIT_REBASE_TODO_PATH}\" ]; then \
      local __comment__='♯ Not injecting GIT_POST_REBASE_EXEC into rebase-todo b/c git-fup did it'; \
      \
      local also_why=''; \
      [ ${retcode} -ne 0 ] || also_why=\"\\n (says ${GIT_REBASE_TODO_PATH})\"; \
      \
      >&2 echo; \
      >&2 echo \"Killing \\`tig\\` because you got work to do${also_why}\"; \
      >&2 echo \"  🥩 🥩 chop chop\"; \
      \
      kill -s 9 $PPID; \
    else \
      local __comment__='♯ else, not calling GIT_POST_REBASE_EXEC b/c git-fup did it'; \
      \
      echo; \
    fi; \
  }; rebase_fixup_staged__into_selected_rev____"

# ***

# I like <C-x> except suggests copy to clipboard (i.e., matches
# conventional "cut" binding; might also suggest <C-z> undoable).
# - So mapping <C-o> to drop commit (mnemonic: drOp).
bind generic <C-o> >sh -c " \
  git_drop_revision_________________________ () { \
    printf \"Really drop %(commit)? [Y/n] \"; \
    read input; \
    if [ -z \"${input}\" ] || [ \"${input}\" = \"Y\" ] || [ \"${input}\" = \"y\" ]; then \
      echo \"git rebase --onto %(commit)^ %(commit)\"; \
      \
      local retcode=0; \
      git rebase --onto %(commit)^ %(commit); \
      retcode=$?; \
      \
      GIT_REBASE_TODO_PATH=\".git/rebase-merge/git-rebase-todo\"; \
      if [ ${retcode} -ne 0 ] || [ -f \"${GIT_REBASE_TODO_PATH}\" ]; then \
        if [ -n \"${GIT_POST_REBASE_EXEC}\" ]; then \
          GITSMART_POST_REBASE_EXECS_TAG=\" $(echo '16i 23 P' | dc)git-abort\"; \
          echo \"exec ${GIT_POST_REBASE_EXEC}\" \
            \"${GITSMART_POST_REBASE_EXECS_TAG}\" \
              >> \"${GIT_REBASE_TODO_PATH}\"; \
        fi; \
        \
        local also_why=''; \
        [ ${retcode} -ne 0 ] || also_why=\"\\n (says ${GIT_REBASE_TODO_PATH})\"; \
        \
        >&2 echo; \
        >&2 echo \"Killing \\`tig\\` because you got work to do${also_why}\"; \
        >&2 echo \"  🥩 🥩 chop chop\"; \
        \
        kill -s 9 $PPID; \
      else \
        [ -n \"${GIT_POST_REBASE_EXEC}\" ] \
          && eval ${GIT_POST_REBASE_EXEC}; \
        \
        echo; \
      fi; \
    else \
      echo \"Ope\"; \
      \
      echo; \
    fi; \
  }; git_drop_revision_________________________"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

